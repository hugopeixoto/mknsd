#!/usr/bin/env ruby

require 'ostruct'

class Server
  attr_reader :name, :v4, :v6
  def initialize(parts)
    @nameserver = parts[0]
    @name = parts[1]
    @v4   = parts[2]
    @v6   = parts[3]
  end

  def nameserver?
    @nameserver != '-'
  end

  def ns
    @nameserver
  end
end

def read_servers(filename)
  File.open(filename)
    .readlines
    .map(&:strip)
    .map { |line| line.split(/\s+/, 4) }
    .map { |parts| Server.new(parts) }
end

def print_zone(filename, servers, dns_servers, version = '1')
  lines = []
  zonename = nil

  File
    .open(filename)
    .readlines
    .map(&:strip)
    .reject(&:empty?)
    .map { |line| line.split(/\s+/, 3) }
    .each do |instruction, arg0, arg1|
      case instruction
      when 'zone'
        zonename = arg0
        lines << "$ORIGIN #{arg0}"
        lines << '$TTL 300'
        if arg1.nil?
          lines << "@    IN SOA  a.ns root #{version} 7200 3600 1209600 3600"
          dns_servers.each do |server|
            lines << "@    IN NS   #{server.ns}.ns"
          end
          dns_servers.each do |server|
            lines << "#{server.ns}.ns IN A    #{server.v4}" if server.v4
            lines << "#{server.ns}.ns IN AAAA #{server.v6}" if server.v6
          end
        else
          lines << "@    IN SOA  a.ns.#{arg1} root #{version} 7200 3600 1209600 3600"
          dns_servers.each do |server|
            lines << "@    IN NS   #{server.ns}.ns.#{arg1}"
          end
        end

      when 'alias'
        server = servers.find { |s| s.name == arg1 }
        lines << "#{arg0} IN A    #{server.v4}" if server.v4
        lines << "#{arg0} IN AAAA #{server.v6}" if server.v6

      when 'cname'
        lines << "#{arg0} IN CNAME #{arg1}"
      when 'mx'
        lines << "#{arg0} IN MX #{arg1}"
      when 'txt'
        lines << "#{arg0} IN TXT #{arg1}"
      end
    end

  [zonename, lines.map { |x| "#{x}\n" }.join]
end

def build(servers, dns_servers)
  `mkdir -p build/zones`
  `mkdir -p build/nsd.conf.d`

  Dir['zones/*'].each do |zonefile|
    name, contents = print_zone(zonefile, servers, dns_servers)
    name.gsub!(/\.$/, '')

    File.write(
      "build/nsd.conf.d/#{name}.conf",
      ['zone:', "  name: #{name}", "  zonefile: /etc/nsd/zones/#{name}"].map { |x| "#{x}\n" }.join,
    )

    File.write("build/zones/#{name}", contents)
  end
end

def deploy(dns_servers)
  dns_servers.each do |server|
    server = server.name
    `rsync -r build/zones/ #{server}:/etc/nsd/zones/`
    `rsync -r build/nsd.conf.d/ #{server}:/etc/nsd/nsd.conf.d/`
    `ssh #{server} service nsd restart`
  end
end

servers = read_servers('servers.txt')
dns_servers = servers.select(&:nameserver?)

if ARGV[0] == "build"
  build(servers, dns_servers)
elsif ARGV[0] == "deploy"
  deploy(dns_servers)
else
  build(servers, dns_servers)
  deploy(dns_servers)
end
